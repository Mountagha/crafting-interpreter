var a = "one";
var b = "two";
print a + b;
var a = 2;
var b = 5;
var c;
c = a + b;
print b / a;

var a = "global a";
var b = "global b";
var c = "global c";
{
  var a = "outer a";
  var b = "outer b";
  {
    var a = "inner a";
    print a;
    print b;
    print c;
  }
  print a;
  print b;
  print c;
}
print a;
print b;
print c;

// conditions
a = 5;
var d;
if ( a == 5) {
  if (d) {
    print "vrai";
  }
} else {
  print "faux";
}

// logical
print "hi" or 2; // "hi".
print nil or "yes"; // "yes".

// while loop 
var a = 1;
while (a < 10) {
  print a;
  a = a + 1;
}

// for loops
//for (var x = 1; x < 10; x = x + 1) {
//  print x;
//}

// fibonnaci
var a = 0;
var temp;

for (var b = 1; a < 10000; b = temp + b) {
  print a;
  temp = a;
  a = b;
}

// function with no parameters
fun test() {
  print "success test toy func 1";
}

// call
test();

// function with parameters
fun say_hi(first, last) {
  print "Hi, " + first + " " + last + "!";
}

// call
say_hi("Dear", "Mountagha");

// test return value
fun add(a, b) {
  return a + b;
}

var res = add(1,2);
print res;

fun max(a, b) {
  if (a > b) {
    return a;
  } else {
    return b;
  }
}

print "maximum of 5 and 9 is: ";
print max(5, 9);

fun fib(n) {
  if (n <= 1) return n;
  return fib(n -2) + fib(n-1);
}

for (var i = 0; i < 20; i = i + 1) {
  print fib(i);
}

// closures
fun makeCounter() {
  var i = 0;
  fun count() {
    i = i + 1;
    print i;
  }

  return count;
}

print "Experimenting closures";
var counter = makeCounter();
counter(); // 1
counter(); // 2

// sneaky corners with closures
var a = "global";
{
  fun showA() {
    print a;
  }

  showA();
  var a = "block";
  showA();
}

